from typing import Any
import datetime

import aiogram
import asyncpg
from aiogram.enums import ParseMode

from database.orm import AsyncOrm
from cache import r
from logger import logger
from schemas.connection import Server
from schemas.referrals import Referrals
from services import service
from handlers.messages import scheduler as ms
from settings import settings


async def run_every_hour(bot: aiogram.Bot) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å"""
    session = await asyncpg.connect(
        user=settings.db.postgres_user,
        host=settings.db.postgres_host,
        password=settings.db.postgres_password,
        port=settings.db.postgres_port,
        database=settings.db.postgres_db
    )

    try:
        await off_expired_connections(session, bot)
        await check_ref_links_and_add_bonus(session, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞ (1 —Ä–∞–∑ –≤ —á–∞—Å) {e}")

    finally:
        await session.close()


async def run_every_day(bot: aiogram.Bot) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å"""
    session = await asyncpg.connect(
        user=settings.db.postgres_user,
        host=settings.db.postgres_host,
        password=settings.db.postgres_password,
        port=settings.db.postgres_port,
        database=settings.db.postgres_db
    )

    try:
        await refresh_current_traffic(session, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å) {e}")

    finally:
        await session.close()


async def off_expired_connections(session: Any, bot: aiogram.Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ expire_date –∏—Å—Ç–µ–∫ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–ª—é—á,
    –µ—Å–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á - –ø—Ä–æ–±–Ω—ã–π, –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è
    """
    active_connections = await AsyncOrm.get_active_connections(session)

    for conn in active_connections:
        if conn.expire_date < datetime.datetime.now():

            # –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–æ–±–Ω—ã–π - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if conn.is_trial:
                server: Server = await AsyncOrm.get_server(conn.server_id, session)

                # —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏
                await service.delete_client(server, conn.email)

                # —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–î
                await AsyncOrm.delete_connection(conn.email, session)

                # –ø–µ—Ä–µ–≤–æ–¥ trial_used –≤ True —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await AsyncOrm.set_trial_used_true(conn.tg_id, session)

                # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = ms.expire_trial_key(conn.key)
                try:
                    await bot.send_message(conn.tg_id, message, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —à–µ–¥—É–ª–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {conn.tg_id} –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")

            # –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª—é—á–µ–π
            else:
                # –ø–µ—Ä–µ–≤–æ–¥–∏–º connection –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –ë–î
                await AsyncOrm.deactivate_connection(conn.email, session)

                # –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏
                server: Server = await AsyncOrm.get_server(conn.server_id, session)
                await service.block_client(server, conn.email, conn.tg_id)

                # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = ms.expire_key(conn)
                try:
                    await bot.send_message(conn.tg_id, message, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —à–µ–¥—É–ª–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {conn.tg_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–ª—é—á–∞: {e}")

            # —É–¥–∞–ª—è–µ–º –∫—ç—à
            r.delete(f"user_conn_server:{conn.tg_id}")


async def check_ref_links_and_add_bonus(session: Any, bot: aiogram.Bot) -> None:
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    active_referrals: list[Referrals] = await AsyncOrm.get_active_referrals(session)

    for ref in active_referrals:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        check_payments: bool = await AsyncOrm.is_confirmed_payment_exists_for_user(ref.to_user_id, session)

        # –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –µ—Å—Ç—å
        if check_payments:

            # –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å, –ø–µ—Ä–µ–≤–æ–¥–∏ is_used –≤ true, —Å–æ–∑–¥–∞–µ–º payment –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É
            await AsyncOrm.add_money_for_ref(ref.to_user_id, ref.from_user_id, settings.ref_bonus, session)

            # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            msg = ms.get_money_for_ref_message(ref.to_user_id)
            try:
                await bot.send_message(ref.from_user_id, msg, message_effect_id="5104841245755180586")  # üî•
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —à–µ–¥—É–ª–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ref.from_user_id} "
                             f"–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: {e}")


async def refresh_current_traffic(session: Any, bot: aiogram.Bot) -> None:
    """–°–∫–∏–¥—ã–≤–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ 0 –ì–±), –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π"""

    print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —à–µ–¥—É–ª–µ—Ä")
    all_connections = await AsyncOrm.get_all_connections(session)

    for conn in all_connections:

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –¥–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
        if (datetime.datetime.now() - conn.start_date).days != 0 \
                and (datetime.datetime.now() - conn.start_date).days % settings.paid_period == 0:

            # –ø–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–µ—Ä
            server = await AsyncOrm.get_server(server_id=conn.server_id, session=session)

            # —Å–∫–∏–¥—ã–≤–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫
            await service.refresh_client_current_traffic(server=server, client_email=conn.email)

            # —É–¥–∞–ª—è–µ–º –∫—ç—à
            r.delete(f"user_conn_server:{conn.tg_id}")

            # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            message = ms.refresh_key_traffic(conn)
            await bot.send_message(conn.tg_id, message)



