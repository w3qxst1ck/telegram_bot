import datetime
import uuid
from typing import Any

from aiogram import Router, types, F
from aiogram.enums import ParseMode

from database.orm import AsyncOrm
from handlers.buttons import commands as cmd
from handlers.keyboards import menu as menu_kb
from schemas.connection import Server
from services import service
from utils.servers_load import get_less_loaded_server
from logger import logger


TRIAL_KEY_DESCRIPTION = "üéÅ –ü—Ä–æ–±–Ω—ã–π"

router = Router()


@router.callback_query(F.data == "trial_key")
async def send_trial_key(message: types.CallbackQuery, session: Any) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""

    waiting_mess = await message.message.answer("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...‚è≥")

    tg_id = str(message.from_user.id)
    already_has_trial = False
    trial_key = ""

    user_with_connections = await AsyncOrm.get_user_with_connection_list(tg_id, session, need_trial=True)

    # –µ—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if user_with_connections.trial_used:
        await message.message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n"
                                     f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∫—É–ø–∏—Ç—å –∫–ª—é—á –≤—ã –º–æ–∂–µ—Ç–µ –≤ /{cmd.MENU[0]}",
                                     reply_markup=menu_kb.to_menu_keyboard().as_markup())
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for conn in user_with_connections.connections:
        # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –ø—Ä–æ–±–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if conn.is_trial:
            already_has_trial = True
            trial_key = conn.key

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –∏ –≤ connections –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not already_has_trial and not user_with_connections.trial_used:
        server_id: int = await get_less_loaded_server(session)
        server: Server = await AsyncOrm.get_server(server_id, session)

        # —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ 3x-ui –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á
        new_uuid = str(uuid.uuid4())
        trial_key = await service.add_client(server, new_uuid, tg_id)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á
        await AsyncOrm.create_connection(
            tg_id=tg_id,
            active=True,
            start_date=datetime.datetime.now(),
            expire_date=datetime.datetime.now() + datetime.timedelta(days=1),
            is_trial=True,
            email=new_uuid,
            key=trial_key,
            description=TRIAL_KEY_DESCRIPTION,
            server_id=server_id,
            session=session,
        )

    await waiting_mess.edit_text(
        "–í–∞—à –∫–ª—é—á, –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚¨áÔ∏è\n\n"
        f"```{trial_key}```\n\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å /{cmd.INSTRUCTION[0]}",
        reply_markup=menu_kb.to_menu_keyboard().as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )

    logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç —Å –∫–ª—é—á–æ–º {trial_key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")