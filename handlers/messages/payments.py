from typing import Any

from schemas.payments import Payments
from schemas.connection import Connection
from utils.date_time_service import convert_date_time
from logger import logger
from database.orm import AsyncOrm
from pydantic import ValidationError


async def user_payments_message(payments: list[Payments], balance: int, session: Any) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = f"–ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä.</b>\n\n"
    count = 0

    if not payments:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π"

    for payment in payments:
        count += 1
        date, time = convert_date_time(payment.created_at, with_tz=True)
        pay_type = payment.description.split("_")[0]

        # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º
        if pay_type == "ADD":
            message += f"<b>{count}</b>. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <b>+{payment.amount} —Ä. </b>{time} <b>{date}</b>\n{'‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' if payment.status else '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}\n\n"

        # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥–∞–º–∏
        elif pay_type == "STARS":
            message += f"<b>{count}</b>. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <b>+{payment.amount} —Ä. </b>{time} <b>{date}</b>\n‚úÖ –û–ø–ª–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥–∞–º–∏\n\n"

        # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
        elif pay_type == "REF":
            message += f"<b>{count}</b>. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <b>+{payment.amount} —Ä. </b>{time} <b>{date}</b>\n‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n\n"

        # –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –∫–ª—é—á–∏
        elif pay_type == "KEY":
            try:
                connection: Connection = await AsyncOrm.get_connection_by_id(int(payment.description.split("_")[1]), session)
                message += f"{count}. –°–ø–∏—Å–∞–Ω–∏–µ <b>-{payment.amount} —Ä. </b>{time} <b>{date}</b>\nüîª –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞ \"{connection.description}\"\n\n"

            # –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–º –∫–ª—é—á–µ
            except ValidationError:
                message += f"{count}. –°–ø–∏—Å–∞–Ω–∏–µ <b>-{payment.amount} —Ä. </b>{time} <b>{date}</b>\nüîª –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞\n\n"

            # –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            except Exception as e:
                count -= 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫–ª—é—á—É: {e}")

        elif pay_type == "TRAF":
            try:
                connection: Connection = await AsyncOrm.get_connection_by_id(int(payment.description.split("_")[1]), session)
                message += f"{count}. –°–ø–∏—Å–∞–Ω–∏–µ <b>-{payment.amount} —Ä. </b>{time} <b>{date}</b>\nüîª –û–±–Ω—É–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–ª—é—á–∞ \"{connection.description}\"\n\n"

            # –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–º –∫–ª—é—á–µ
            except ValidationError:
                message += f"{count}. –°–ø–∏—Å–∞–Ω–∏–µ <b>-{payment.amount} —Ä. </b>{time} <b>{date}</b>\nüîª –û–±–Ω—É–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–ª—é—á–∞\n\n"

            # –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            except Exception as e:
                count -= 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫–ª—é—á—É: {e}")

    return message
