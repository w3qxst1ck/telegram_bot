import datetime
import os
from typing import Any

import asyncpg
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.orm import AsyncOrm
from schemas.user import UserAdd
from handlers.buttons import commands as cmd
from settings import settings

router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message | types.CallbackQuery, admin: bool, session: Any) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start"""
    tg_id: str = str(message.from_user.id)

    await create_user_if_not_exists(tg_id, message, session)
    await send_hello_message(message, session)
    # await show_main_menu_message(message, admin, session)


async def send_hello_message(message: types.Message, session: Any) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    name: str = message.from_user.first_name if message.from_user.first_name else message.from_user.username
    trial_status: asyncpg.Record = await AsyncOrm.get_trial_subscription_status(str(message.from_user.id), session)
    image_path = os.path.join("img", "start.png")

    msg = f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n{settings.bot_name} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ " \
              f"–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"

    # –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if trial_status["is_trial"] and not trial_status["trial_used"]:
        trial_key = "123456789"  # TODO –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–ª—é—á–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ç—É—Ç
        msg += f"–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ <b>{settings.trial_days} –¥–µ–Ω—å</b>.\n" \
                   f"–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n<b>{trial_key}</b>\n\n" \
                   f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ vpn –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /{cmd.INSTRUCTION[0]}\n\n"

    # –µ—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫
    else:
        msg += f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫ :(\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è /{cmd.BALANCE[0]} –∏ " \
                   f"–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>–∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /{cmd.BUY[0]}</b>\n\n"

    msg += f"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /{cmd.HELP[0]}"

    if os.path.isfile(image_path):
        with open(image_path, "rb") as image_buffer:
            if type(message) == types.Message:
                await message.answer_photo(
                    photo=BufferedInputFile(image_buffer.read(), filename="start.png"),
                    caption=msg,
                )
    else:
        await message.answer(msg)


async def create_user_if_not_exists(tg_id: str, message: types.Message, session: Any) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    user_exists: bool = await AsyncOrm.check_user_already_exists(tg_id, session)

    if not user_exists:
        user: UserAdd = UserAdd(
            tg_id=tg_id,
            username=message.from_user.username,
            firstname=message.from_user.first_name,
            lastname=message.from_user.last_name
        )
        await AsyncOrm.create_user(user, session)

        # —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–∞ 1 –¥–µ–Ω—å
        await AsyncOrm.create_subscription(
            tg_id=tg_id,
            active=True,
            start_date=datetime.datetime.now(),
            expire_date=datetime.datetime.now() + datetime.timedelta(days=settings.trial_days),
            is_trial=True,
            trial_used=False,
            session=session
        )


# async def show_main_menu_message(message: types.Message | types.CallbackQuery, admin: bool, session: Any) -> None:
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
#     name: str = message.from_user.username if message.from_user.username else message.from_user.first_name
#     trial_status = await AsyncOrm.get_trial_subscription_status(str(message.from_user.id), session)
#     image_path = os.path.join("img", "start.png")
#
#     builder = InlineKeyboardBuilder()
#
#     if not trial_status["is_trial"]:
#         builder.row(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="connect-vpn"))
#
#     builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))
#
#     builder.row(
#         InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://www.google.com/webhp?hl=ru&sa=X&ved=0ahUKEwj2iMiEk7eLAxVtVkEAHeEnOj0QPAgI"),
#         InlineKeyboardButton(text="üåê –û –Ω–∞—à–µ–º VPN", callback_data="about"),
#     )
#
#     if admin:
#         builder.row(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))
#
#     msg = f"–ü—Ä–∏–≤–µ—Ç, {name}!\n"
#     if trial_status["is_trial"]:
#         msg += "\n–£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n–í–∞—à –∫–ª—é—á: ...\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ ..."
#
#     if os.path.isfile(image_path):
#         with open(image_path, "rb") as image_buffer:
#             if type(message) == types.Message:
#                 await message.answer_photo(
#                     photo=BufferedInputFile(image_buffer.read(), filename="start.png"),
#                     caption=msg,
#                     reply_markup=builder.as_markup(),
#                 )
#             else:
#                 await message.message.answer_photo(
#                     photo=BufferedInputFile(image_buffer.read(), filename="start.png"),
#                     caption=msg,
#                     reply_markup=builder.as_markup(),
#                 )
#     else:
#         await message.answer(msg, reply_markup=builder.as_markup())
