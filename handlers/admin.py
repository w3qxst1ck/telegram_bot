from typing import Any

import aiogram
import asyncpg
from aiogram import Router, types, F, Bot
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext

from middlewares.admin import AdminMiddleware
from database.orm import AsyncOrm
from schemas.user import UserConnList
from handlers.messages import errors as err_ms
from handlers.messages.admin import statistics_message
from handlers.messages.balance import paid_request_for_admin, paid_confirmed_for_user, paid_decline_for_user
from logger import logger
from cache import r
from handlers.keyboards import admin as kb
from handlers.states.admin import NotifyUsersFSM


router = Router()
router.message.middleware.register(AdminMiddleware())


@router.callback_query(or_f(F.data.split("|")[0] == "admin-payment-confirm",
                            F.data.split("|")[0] == "admin-payment-cancel"))
async def confirm_decline_payment_handler(callback: types.CallbackQuery, bot: Bot, session: Any):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º"""
    tg_id = callback.data.split("|")[1]
    summ = callback.data.split("|")[2]
    payment_id = int(callback.data.split("|")[3])

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    if callback.data.split("|")[0] == "admin-payment-confirm":
        try:
            # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await AsyncOrm.confirm_payment(payment_id, tg_id, int(summ), session)

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            message_for_admin = paid_request_for_admin(summ, tg_id).split("\n\n")[0]
            message_for_admin += "\n\n–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω"
            await callback.message.edit_text(message_for_admin)

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message_for_user = paid_confirmed_for_user(summ)
            await bot.send_message(tg_id, message_for_user, message_effect_id="5104841245755180586")    # üî•

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            cache_data = r.get(f"user_conn_server:{tg_id}")
            if cache_data:
                user_conn_list = UserConnList.model_validate_json(cache_data)
                user_conn_list.balance += int(summ)
                user_conn_list_json = user_conn_list.model_dump_json()
                r.setex(f"user_conn_server:{tg_id}", 180, user_conn_list_json)

            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –Ω–∞ —Å—É–º–º—É {summ} —Ä.")
            logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summ} —Ä.")

        except Exception as e:
            err_msg = err_ms.error_balance_for_admin(e)
            await callback.message.answer(err_msg)

    # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    elif callback.data.split("|")[0] == "admin-payment-cancel":
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        message_for_admin = paid_request_for_admin(summ, tg_id).split("\n\n")[0]
        message_for_admin += "\n\n–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå\n–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        await callback.message.edit_text(message_for_admin)

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_for_user = paid_decline_for_user(summ)
        await bot.send_message(tg_id, message_for_user)

        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –Ω–∞ —Å—É–º–º—É {summ} —Ä.")


@router.callback_query(F.data == "menu|admin")
async def admin_menu(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    msg = "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    await callback.message.edit_text(msg, reply_markup=kb.admin_keyboard().as_markup())


@router.callback_query(F.data == "notify_users")
async def choose_users(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # —Å–±—Ä–æ—Å —Å—Ç–µ–π—Ç–∞ –ø—Ä–∏ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥ –∏–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_state = await state.get_state()
    if current_state:
        await state.clear()

    msg = "\"<b>–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\" - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –±–æ—Ç–µ\n\n" \
          "\"<b>–ü–æ–ª—å–∑. —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏</b>\" - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏\n\n" \
          "\"<b>–ü–æ–ª—å–∑. –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>\" - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"

    await callback.message.edit_text(msg, reply_markup=kb.admin_users_group().as_markup())


@router.callback_query(F.data.split("|")[0] == "users_group")
async def get_message_for_users(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_group = callback.data.split("|")[1]

    await state.set_state(NotifyUsersFSM.text)
    await state.update_data(users_group=users_group)

    msg = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å "
    if users_group == "all":
        msg += "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif users_group == "expired":
        msg += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∫–ª—é—á"
    else:
        msg += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏–º–µ—é—â–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏"

    prev_mess = await callback.message.edit_text(msg, reply_markup=kb.back_button().as_markup())
    await state.update_data(prev_mess=prev_mess)


@router.message(NotifyUsersFSM.text)
async def notify_users(message: types.Message, state: FSMContext, session: Any, bot: aiogram.Bot) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()

    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç
    if not message.text:
        try:
            await data["prev_mess"].delete()
        except Exception:
            pass
        msg = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", reply_markup=kb.back_button().as_markup())
        await state.update_data(prev_mess=msg)
        return

    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç
    await state.clear()

    # –º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_mess"].delete()
    except Exception:
        pass

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    wait_message = await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...‚è≥")

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    msg = message.html_text
    users_group = data["users_group"]

    # –ø–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await get_user_group_ids(users_group, session)

    # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_message_counter = 0
    for tg_id in user_ids:
        try:
            await bot.send_message(tg_id, msg)
            success_message_counter += 1
        except Exception as e:
            logger.error(f"–ü—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    await wait_message.edit_text(f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{success_message_counter}</b>")


async def get_user_group_ids(users_group: str, session: Any) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if users_group == "all":
        users_ids = await AsyncOrm.get_all_tg_ids(session)
    elif users_group == "expired":
        users_ids = await AsyncOrm.get_expired_users_tg_ids(session)
    else:
        users_ids = await AsyncOrm.get_active_users_tg_ids(session)

    return users_ids


@router.callback_query(F.data == "stats")
async def statistics(callback: types.CallbackQuery, session: Any) -> None:
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    wait_message = await callback.message.edit_text("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...‚è≥")

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await AsyncOrm.get_statistic_data(session)

    msg = statistics_message(data)

    await wait_message.edit_text(msg, reply_markup=kb.back_to_admin_menu().as_markup())


