import datetime
from typing import Any

from aiogram import Router, F, types
from aiogram.filters import or_f
from aiogram.types import LabeledPrice, PreCheckoutQuery

from database.orm import AsyncOrm
from settings import settings
from handlers.keyboards import star_payment as kb
from handlers.messages.errors import general_error_msg
from handlers.messages import star_payment as ms
from logger import logger

router = Router()


@router.callback_query(or_f(F.data == "pay_method_star", F.data == "cancel_star_payment"))
async def balance_handler(callback: types.CallbackQuery, session: Any) -> None:
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    tg_id = str(callback.from_user.id)
    user_balance = await AsyncOrm.get_user_balance(tg_id, session)

    msg = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user_balance} —Ä.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    if callback.data == "pay_method_star":
        await callback.message.edit_text(msg, reply_markup=kb.choose_star_count_keyboard().as_markup())
    else:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(msg, reply_markup=kb.choose_star_count_keyboard().as_markup(),
                                      message_effect_id="5104841245755180586")


@router.callback_query(F.data.split("|")[0] == "stars")
async def send_star_invoice_handler(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ invoice –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏"""
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    stars_count = int(callback.data.split("|")[1])
    # —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    summ = settings.stars_price_list[str(stars_count)]

    await callback.message.answer_invoice(
        title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {summ} —Ä.",
        description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å {stars_count} ‚≠êÔ∏è",
        prices=[LabeledPrice(label="XTR", amount=stars_count)],
        provider_token="",
        payload=f"{summ}",
        currency="XTR",
        reply_markup=kb.back_to_choose_star_count(stars_count).as_markup()
    )


@router.pre_checkout_query()
async def on_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def on_successful_payment(message: types.Message, session: Any):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏"""
    wait_message = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...‚è≥")

    summ = int(message.successful_payment.invoice_payload)
    tg_id = str(message.from_user.id)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ payments
    created_at = datetime.datetime.now()
    await AsyncOrm.create_payment(tg_id, summ, "STARS", True, created_at, session)

    # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    try:
        await AsyncOrm.up_balance(tg_id, summ, session)
    except Exception:
        msg = general_error_msg()
        await wait_message.edit_text(msg)
        return

    msg = ms.up_balance_message(summ)
    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await wait_message.edit_text(msg)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥–∞–º–∏ –Ω–∞ —Å—É–º–º—É {summ}")



